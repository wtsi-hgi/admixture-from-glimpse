process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time   = { check_max( 1.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    

    withName:BCFTOOLS_VIEW {
        ext.args = "-i 'INFO/INFO>=0.90' -Oz"
    }
    withName:BCFTOOLS_ISEC {
        ext.args = "-Oz"
        time   = { check_max( 10.h   * task.attempt, 'time'    ) }
    }
    withName:PLINK2_VCF {
        ext.args = "--max-alleles 2 --double-id --chr 1-22 --allow-extra-chr --vcf-half-call missing --make-bed"
    }
    withName:PLINK2_MAF_FILTER {
        ext.args = "--max-alleles 2 --double-id --maf 0.01 --set-missing-var-ids @:# --make-bed"
    }
    withName:PLINK2_VAR_FILTER {
        ext.args = "--geno 0.05 --double-id --make-bed"
    }
    withName:PLINK2_SAMPLE_FILTER {
        ext.args = "--double-id --mind 0.1 --make-bed"
    }
    withName:PLINK2_REMOVE{
        ext.args = "--double-id --make-bed"
    }
    withName:PLINK2_HWE_FILTER {
        ext.args = "--hwe 1e-6 midp --make-bed"
    }
    withName:PLINK2_EXTRACT {
        ext.args = "--make-bed"
    }
    withName:FIND_RELATED_SAMPLES {
        memory = { check_max( 2.GB * task.attempt, 'memory'  ) }
    }
    withName:PLINK2_PCA {
        ext.args = "--make-bed"
    }
    withName:ADMIXTURE{
        cpus          = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 20.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 24.h   * task.attempt, 'time'    ) }
    }


    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_medium {
        cpus          = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 8.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_high {
        cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h  * task.attempt, 'time'   ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }



    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

}